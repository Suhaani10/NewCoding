
public class StackUsingLinkedList {
    
    
    class Node {
        int data;
        Node next;
        
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }
    
    private Node top; 
    
  
    StackUsingLinkedList() {
        top = null;
    }
    
    
    public void push(int value) {
        Node newNode = new Node(value);
        newNode.next = top; 
        top = newNode;      
        System.out.println(value + " pushed to stack");
    }
    
    
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow");
            return -1;
        }
        int popped = top.data;
        top = top.next; // Move top down
        return popped;
    }
    
    
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return -1;
        }
        return top.data;
    }
    
    
    public boolean isEmpty() {
        return (top == null);
    }
    
    
    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return;
        }
        Node temp = top;
        System.out.print("Stack: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
    
    
    public static void main(String[] args) {
        StackUsingLinkedList stack = new StackUsingLinkedList();
        
        stack.push(10);
        stack.push(20);
        stack.push(30);
        
        stack.display();
        
        System.out.println("Top element is " + stack.peek());
        System.out.println("Popped element is " + stack.pop());
        
        stack.display();
    }
}
